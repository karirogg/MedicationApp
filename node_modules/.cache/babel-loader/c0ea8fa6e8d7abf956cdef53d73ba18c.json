{"ast":null,"code":"var _jsxFileName = \"/Users/bollo/Documents/Kari/Forritun/MedicationApp/src/Components/MedsTable.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../CSS/Info.css';\n\nclass MedsTable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.formatDate = num => {\n      if (num < 10) return \"0\" + String(num);\n      return \"\" + num;\n    };\n\n    this.relevantTimelabels = () => {\n      let relevant = [];\n      const timeLabels = [];\n      let k = 0;\n\n      for (let i = 0; i < 24; i++) {\n        timeLabels.push( /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 29\n          }\n        }, i + \":00\"));\n        timeLabels.push( /*#__PURE__*/React.createElement(\"th\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 29\n          }\n        }, i + \":30\"));\n      }\n\n      outer: for (let i = 0; i < 48; i++) {\n        for (let j = 0; j < this.props.meds.length; j++) {\n          for (let k = 0; k < this.props.meds[j].doses.length; k++) {\n            if (this.props.meds[j].doses[k].hour == i) {\n              relevant.push(timeLabels[i]);\n              continue outer;\n            }\n          }\n        }\n      }\n\n      return relevant;\n    };\n\n    this.summarizeAmounts = doses => {\n      let count = [];\n\n      for (let i = 0; i < doses.length; i++) {\n        let included = false;\n\n        for (let j = 0; j < count.length; j++) {\n          if (count[j].amount === doses[i].amount) {\n            count[j].total++;\n          }\n        }\n\n        if (included === false) {\n          count.push({\n            amount: doses[i].amount,\n            total: 1\n          });\n        }\n      }\n\n      var s = \"\";\n\n      for (let i = 0; i < count.length; i++) {\n        if (i > 0) s += \" + \";\n        s += count[i].total + \"x\" + count[i].amount;\n      }\n\n      return s;\n    };\n  }\n\n  render() {\n    let timeLabels = this.relevantTimelabels();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"medication-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, \"Nafn\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }, \"Magn\"), timeLabels)), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, this.props.meds ? this.props.meds.map((med, i) => {\n      let k = 0;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }\n      }, med.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 37\n        }\n      }, this.summarizeAmounts(med.doses)), timeLabels.map((time, j) => {\n        let value = \"\";\n        let dose = this.props.meds[j].doses[k];\n        console.log(time);\n        console.log(dose.hour + \":\" + dose.minute);\n\n        if (dose && dose.hour + \":\" + dose.minute === time) {\n          value = this.props.meds[j].doses[k].amount;\n          k++;\n        }\n\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 48\n          }\n        }, value);\n      }));\n    }) : null)));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    meds: state.meds\n  };\n}\n\nexport default connect(mapStateToProps)(MedsTable);","map":{"version":3,"sources":["/Users/bollo/Documents/Kari/Forritun/MedicationApp/src/Components/MedsTable.js"],"names":["React","Component","connect","MedsTable","formatDate","num","String","relevantTimelabels","relevant","timeLabels","k","i","push","outer","j","props","meds","length","doses","hour","summarizeAmounts","count","included","amount","total","s","render","id","map","med","name","time","value","dose","console","log","minute","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../CSS/Info.css';\n\nclass MedsTable extends Component {\n    formatDate = (num) => {\n        if(num < 10) return(\"0\" + String(num));\n        return(\"\"+num);\n    }\n\n    // Needs optimizing, think about sorting etc.\n    relevantTimelabels = () => {\n        let relevant = [];\n        const timeLabels = [];\n        let k = 0;\n\n        for(let i = 0; i<24; i++) {\n            timeLabels.push(<th>{i + \":00\"}</th>);\n            timeLabels.push(<th>{i + \":30\"}</th>);\n        }\n\n        outer:\n        for(let i = 0; i < 48; i++) {\n            for(let j = 0; j<this.props.meds.length; j++) {\n                for(let k = 0; k<this.props.meds[j].doses.length; k++) {\n                    if(this.props.meds[j].doses[k].hour == i) {\n                        relevant.push(timeLabels[i]);\n                        continue outer;\n                    }\n                }\n            } \n        }\n        return(relevant)\n    }\n\n    // Needs optimizing, think about sorting etc.\n    summarizeAmounts = (doses) => {\n        let count = [];\n        for(let i = 0; i<doses.length; i++) {\n            let included = false;\n            for(let j = 0; j<count.length; j++) {\n                if(count[j].amount === doses[i].amount) {\n                    count[j].total++;\n                }\n            }\n            if(included === false) {\n                count.push({amount: doses[i].amount, total: 1});\n            }\n\n        }\n\n        var s = \"\";\n\n        for(let i = 0; i<count.length; i++) {\n            if(i > 0) s += \" + \"\n            s += count[i].total + \"x\" + count[i].amount;\n        }\n\n        return s;\n    }\n\n    render() {\n        let timeLabels = this.relevantTimelabels();\n\n        return(<div key={this.props.id}>\n                <table className=\"medication-info\">\n                    <thead>\n                        <tr>\n                            <th>Nafn</th>\n                            <th>Magn</th>\n                            {timeLabels}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.meds ? this.props.meds.map((med, i) => {\n                            let k = 0;\n                            return(<tr key={i}>\n                                    <td key={i}>{med.name}</td>\n                                    <td>{this.summarizeAmounts(med.doses)}</td>\n                                    {timeLabels.map((time, j) => {\n                                        let value = \"\";\n                                        let dose = this.props.meds[j].doses[k];\n                                        console.log(time);\n                                        console.log((dose.hour + \":\" + dose.minute));\n                                        if (dose && (dose.hour + \":\" + dose.minute) === time) {\n                                            value = this.props.meds[j].doses[k].amount;\n                                            k++;\n                                        }\n                                        return(<td>{value}</td>);\n                                    })}\n                                </tr>);\n                        }) : null}\n                    </tbody>\n                </table>\n            </div>);\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {meds: state.meds};\n}\n\nexport default connect(mapStateToProps)(MedsTable);"]},"metadata":{},"sourceType":"module"}