{"ast":null,"code":"var _jsxFileName = \"/Users/bollo/Documents/Kari/Forritun/MedicationApp/src/Components/MedsTable.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../CSS/Info.css';\n\nclass MedsTable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.formatDate = num => {\n      if (parseInt(num) < 10) return \"0\" + String(num);\n      return \"\" + num;\n    };\n\n    this.relevantTimelabels = () => {\n      let relevant = [];\n      const timeLabels = [];\n\n      for (let i = 0; i < 24; i++) {\n        timeLabels.push(this.formatDate(i) + \":00\");\n        timeLabels.push(this.formatDate(i) + \":30\");\n      }\n\n      outer: for (let i = 0; i < 48; i++) {\n        for (let j = 0; j < this.props.meds.length; j++) {\n          for (let k = 0; k < this.props.meds[j].doses.length; k++) {\n            if (parseInt(this.props.meds[j].doses[k].hour) === Math.floor(i / 2) && parseInt(this.props.meds[j].doses[k].minute) === 30 * (i % 2)) {\n              relevant.push(timeLabels[i]);\n              continue outer;\n            }\n          }\n        }\n      }\n\n      return relevant;\n    };\n\n    this.summarizeAmounts = doses => {\n      let count = [];\n\n      for (let i = 0; i < doses.length; i++) {\n        let included = false;\n\n        for (let j = 0; j < count.length; j++) {\n          if (count[j].amount === doses[i].amount) {\n            count[j].total++;\n          }\n        }\n\n        if (included === false) {\n          count.push({\n            amount: doses[i].amount,\n            total: 1\n          });\n        }\n      }\n\n      var s = \"\";\n\n      for (let i = 0; i < count.length; i++) {\n        if (i > 0) s += \" + \";\n        s += count[i].total + \"x\" + count[i].amount;\n      }\n\n      return s;\n    };\n  }\n\n  render() {\n    let timeLabels = this.relevantTimelabels();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"medication-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, timeLabels.length > 0 ? /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 54\n      }\n    }, \"Nafn\") : null, timeLabels.length > 0 ? /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 54\n      }\n    }, \"Magn\") : null, timeLabels.map(time => /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 56\n      }\n    }, time)))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, this.props.meds ? this.props.meds.map((med, i) => {\n      var k = 0;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 37\n        }\n      }, med.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }\n      }, this.summarizeAmounts(med.doses)), timeLabels.map((time, j) => {\n        let value = \"\";\n        console.log(JSON.stringify(this.props.meds[i]));\n        let dose = this.props.meds[i].doses[k];\n\n        if (dose && dose.hour + \":\" + dose.minute === time) {\n          value = this.props.meds[i].doses[k].amount;\n          k++;\n        }\n\n        return /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 48\n          }\n        }, value);\n      }));\n    }) : null)));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    meds: state.meds\n  };\n}\n\nexport default connect(mapStateToProps)(MedsTable);","map":{"version":3,"sources":["/Users/bollo/Documents/Kari/Forritun/MedicationApp/src/Components/MedsTable.js"],"names":["React","Component","connect","MedsTable","formatDate","num","parseInt","String","relevantTimelabels","relevant","timeLabels","i","push","outer","j","props","meds","length","k","doses","hour","Math","floor","minute","summarizeAmounts","count","included","amount","total","s","render","id","map","time","med","name","value","console","log","JSON","stringify","dose","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../CSS/Info.css';\n\nclass MedsTable extends Component {\n    formatDate = (num) => {\n        if(parseInt(num) < 10) return(\"0\" + String(num));\n        return(\"\"+num);\n    }\n\n    // Needs optimizing, think about sorting etc.\n    relevantTimelabels = () => {\n        let relevant = [];\n        const timeLabels = [];\n\n        for(let i = 0; i<24; i++) {\n            timeLabels.push(this.formatDate(i) + \":00\");\n            timeLabels.push(this.formatDate(i) + \":30\");\n        }\n\n        outer:\n        for(let i = 0; i < 48; i++) {\n            for(let j = 0; j<this.props.meds.length; j++) {\n                for(let k = 0; k<this.props.meds[j].doses.length; k++) {\n                    if(parseInt(this.props.meds[j].doses[k].hour) === Math.floor(i/2) && parseInt(this.props.meds[j].doses[k].minute) === 30*(i%2)) {\n                        relevant.push(timeLabels[i]);\n                        continue outer;\n                    }\n                }\n            } \n        }\n        return(relevant)\n    }\n\n    // Needs optimizing, think about sorting etc.\n    summarizeAmounts = (doses) => {\n        let count = [];\n        for(let i = 0; i<doses.length; i++) {\n            let included = false;\n            for(let j = 0; j<count.length; j++) {\n                if(count[j].amount === doses[i].amount) {\n                    count[j].total++;\n                }\n            }\n            if(included === false) {\n                count.push({amount: doses[i].amount, total: 1});\n            }\n\n        }\n\n        var s = \"\";\n\n        for(let i = 0; i<count.length; i++) {\n            if(i > 0) s += \" + \"\n            s += count[i].total + \"x\" + count[i].amount;\n        }\n\n        return s;\n    }\n\n    render() {\n        let timeLabels = this.relevantTimelabels();\n\n        return(<div key={this.props.id}>\n                <table className=\"medication-info\">\n                    <thead>\n                        <tr>\n                            {timeLabels.length > 0 ? <th>Nafn</th> : null}\n                            {timeLabels.length > 0 ? <th>Magn</th> : null}\n                            {timeLabels.map((time) => (<th>{time}</th>))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.meds ? this.props.meds.map((med, i) => {\n                            var k = 0;\n                            return(<tr key={i}>\n                                    <td key={i}>{med.name}</td>\n                                    <td>{this.summarizeAmounts(med.doses)}</td>\n                                    {timeLabels.map((time, j) => {\n                                        let value = \"\";\n                                        console.log(JSON.stringify(this.props.meds[i]));\n                                        let dose = this.props.meds[i].doses[k];\n                                        if (dose && (dose.hour + \":\" + dose.minute) === time) {\n                                            value = this.props.meds[i].doses[k].amount;\n                                            k++;\n                                        }\n                                        return(<td>{value}</td>);\n                                    })}\n                                </tr>);\n                        }) : null}\n                    </tbody>\n                </table>\n            </div>);\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {meds: state.meds};\n}\n\nexport default connect(mapStateToProps)(MedsTable);"]},"metadata":{},"sourceType":"module"}