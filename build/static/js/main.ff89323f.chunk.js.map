{"version":3,"sources":["Components/Header.js","Actions/add-meds-action.js","Actions/edit-meds-action.js","Actions/delete-meds-action.js","Components/NewDose.js","Components/AddWindow.js","Components/MedsTable.js","Components/Info.js","Components/App.js","serviceWorker.js","Reducers/meds-reducer.js","Reducers/combiner.js","index.js"],"names":["Header","className","Component","addMeds","med","console","log","name","doses","type","payload","editMeds","index","deleteMeds","NewDose","hourEdited","event","newValue","target","value","length","props","edit_hour","replace","id","minuteEdited","edit_minute","amountEdited","edit_amount","ref","onChange","this","selected","onClick","hr_up","hour_input","bind","dose","hour","max","hr_down","min_up","minute_input","minute","min_down","removeElementAtIndex","AddWindow","state","formatDate","num","String","i","hr","parseInt","state_copy","JSON","parse","stringify","setState","min","amount","edit_name","splice","submitMeds","sort","a","b","toggleAdd","alert","addDose","placeholder","map","key","connect","dispatch","bindActionCreators","MedsTable","relevantTimelabels","relevant","timeLabels","push","outer","j","meds","k","Math","floor","summarizeAmounts","count","total","s","time","Info","seen","openAddWindowMed","openAddWindowIndex","App","Boolean","window","location","hostname","match","allReducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAaeA,E,uKARP,OACA,yBAAKC,UAAY,e,GAHJC,a,gBCHRC,G,MAAU,SAACC,GAIpB,OAHAC,QAAQC,IAAI,mBAAqBF,EAAIG,MACrCF,QAAQC,IAAI,UAAYF,EAAII,OAErB,CACHC,KAAM,iBACNC,QAASN,KCNJO,EAAW,SAACP,EAAKQ,GAE1B,OADAP,QAAQC,IAAI,8BAAgCM,GACrC,CACHH,KAAM,kBACNC,QAAS,CACLN,IAAIA,EACJQ,MAAMA,KCNLC,EAAa,SAACD,GAEvB,OADAP,QAAQC,IAAI,gCAAkCM,GACxC,CACFH,KAAM,oBACNC,QAASE,I,cC2CFE,G,kNA3CXC,WAAa,SAACC,GACV,IAAIC,EAAWD,EAAME,OAAOC,MACzBF,EAASG,QAAU,GAClB,EAAKC,MAAMC,UAAUL,EAASM,QAAQ,WAAY,IAAK,EAAKF,MAAMG,K,EAG1EC,aAAe,SAACT,GACZ,IAAIC,EAAWD,EAAME,OAAOC,MACzBF,EAASG,QAAU,GAClB,EAAKC,MAAMK,YAAYT,EAASM,QAAQ,WAAY,IAAK,EAAKF,MAAMG,K,EAG5EG,aAAe,SAACX,GACZ,EAAKK,MAAMO,YAAYZ,EAAME,OAAOC,MAAO,EAAKE,MAAMG,K,uDAGhD,IAAD,OACL,OAAO,yBAAKvB,UAAU,YACtB,yBAAKA,UAAU,iBACX,4BAAQ4B,IAAI,SAASC,SAAUC,KAAKJ,cAChC,4BAAQR,MAAM,OAAOa,UAAQ,GAA7B,QACA,4BAAQb,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,WAGR,yBAAKlB,UAAU,eACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,QAAQgC,QAAS,WAAO,EAAKZ,MAAMa,MAAM,EAAKb,MAAMG,OACnE,2BAAOf,KAAK,OAAOoB,IAAK,SAACA,GAAD,OAAS,EAAKM,WAAaN,GAAK5B,UAAU,KAAK6B,SAAUC,KAAKhB,WAAWqB,KAAKL,MAAOZ,MAAOY,KAAKV,MAAMgB,KAAKC,KAAMC,IAAI,OAC9I,yBAAKtC,UAAU,UAAUgC,QAAS,WAAO,EAAKZ,MAAMmB,QAAQ,EAAKnB,MAAMG,QAE3E,yBAAKvB,UAAU,aAAf,KACA,yBAAKA,UAAU,UACX,yBAAKA,UAAU,SAASgC,QAAS,WAAO,EAAKZ,MAAMoB,OAAO,EAAKpB,MAAMG,OACrE,2BAAOf,KAAK,OAAOoB,IAAK,SAACA,GAAD,OAAS,EAAKa,aAAeb,GAAK5B,UAAU,MAAM6B,SAAUC,KAAKN,aAAaW,KAAKL,MAAOZ,MAAOY,KAAKV,MAAMgB,KAAKM,OAAQJ,IAAI,OACrJ,yBAAKtC,UAAU,WAAWgC,QAAS,WAAO,EAAKZ,MAAMuB,SAAS,EAAKvB,MAAMG,SAGjF,4BAAQvB,UAAU,iBAAiBgC,QAAS,kBAAO,EAAKZ,MAAMwB,qBAAqB,EAAKxB,MAAMG,MAA9F,gB,GAvCctB,cCMhB4C,E,4MACFC,MAAQ,CACJxC,KAAM,EAAKc,MAAMjB,IAAIG,KACrBC,MAAO,EAAKa,MAAMjB,IAAII,O,EAG1BwC,WAAa,SAACC,GACV,OAA0B,IAAvBC,OAAOD,GAAK7B,OAAqB,IAAM8B,OAAOD,GACtC,KAARA,EAAmB,KACf,GAAGA,G,EAEdf,MAAQ,SAACiB,GACL,IAAIC,EAAKC,SAAS,EAAKN,MAAMvC,MAAM2C,GAAGb,MACN,KAA7B,EAAKS,MAAMvC,MAAM2C,GAAGb,OAAac,EAAK,KACzCA,EACQ,KAAIA,EAAK,GACjB,IAAIE,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGb,KAAO,EAAKU,WAAWI,GAC3C,EAAKM,SAASJ,I,EAElBd,QAAU,SAACW,GACP,IAAIC,EAAKC,SAAS,EAAKN,MAAMvC,MAAM2C,GAAGb,MACf,KAApB,EAAKS,MAAMT,OAAac,EAAK,KAChCA,EACQ,IAAGA,EAAK,IAChB,IAAIE,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGb,KAAO,EAAKU,WAAWI,GAC3C,EAAKM,SAASJ,I,EAElBb,OAAS,SAACU,GACN,IAAIC,EAAKC,SAAS,EAAKN,MAAMvC,MAAM2C,GAAGb,MAClCqB,EAAMN,SAAS,EAAKN,MAAMvC,MAAM2C,GAAGR,QACL,KAA/B,EAAKI,MAAMvC,MAAM2C,GAAGR,SAAegB,EAAM,GACZ,KAA7B,EAAKZ,MAAMvC,MAAM2C,GAAGb,OAAac,EAAK,IAEzCO,GAAO,KACG,KACNA,EAAM,IACNP,EACQ,KAAIA,EAAK,IAErB,IAAIE,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGR,OAAS,EAAKK,WAAWW,GAC7CL,EAAW9C,MAAM2C,GAAGb,KAAO,EAAKU,WAAWI,GAC3C,EAAKM,SAASJ,I,EAElBV,SAAW,SAACO,GACR,IAAIC,EAAKC,SAAS,EAAKN,MAAMvC,MAAM2C,GAAGb,MAClCqB,EAAMN,SAAS,EAAKN,MAAMvC,MAAM2C,GAAGR,QACP,KAA7B,EAAKI,MAAMvC,MAAM2C,GAAGb,OAAac,EAAK,GACP,KAA/B,EAAKL,MAAMvC,MAAM2C,GAAGR,SAAegB,EAAM,IAE5CA,GAAO,IACE,IACLA,EAAM,KACNP,EACQ,IAAGA,EAAK,KAEpB,IAAIE,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGR,OAAS,EAAKK,WAAWW,GAC7CL,EAAW9C,MAAM2C,GAAGb,KAAO,EAAKU,WAAWI,GAC3C,EAAKM,SAASJ,I,EAGlB5B,YAAc,SAACP,EAAOgC,GAClB,IAAIG,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGR,OAASxB,EAC7B,EAAKuC,SAASJ,I,EAElBhC,UAAY,SAACH,EAAOgC,GAChB,IAAIG,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGb,KAAOnB,EAC3B,EAAKuC,SAASJ,I,EAElB1B,YAAc,SAACT,EAAOgC,GAClB,IAAIG,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAM2C,GAAGS,OAASzC,EAC7B,EAAKuC,SAASJ,I,EAElBO,UAAY,SAAC7C,GACT,IAAIsC,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW/C,KAAOS,EAAME,OAAOC,MAC/B,EAAKuC,SAASJ,I,EAGlBT,qBAAuB,SAACM,GACpB,IAAIG,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QAChDO,EAAW9C,MAAMsD,OAAOX,EAAG,GAC3B,EAAKO,SAASJ,I,EAGlBS,WAAa,WAET,IADA,IAAIT,EAAaC,KAAKC,MAAMD,KAAKE,UAAU,EAAKV,QACxCI,EAAI,EAAGA,EAAGG,EAAW9C,MAAMY,OAAQ+B,IACvC9C,QAAQC,IAAI,EAAK0C,WAAWM,EAAW9C,MAAM2C,GAAGb,OAChDgB,EAAW9C,MAAM2C,GAAGb,KAAO,EAAKU,WAAWM,EAAW9C,MAAM2C,GAAGb,MAC/DgB,EAAW9C,MAAM2C,GAAGR,OAAS,EAAKK,WAAWM,EAAW9C,MAAM2C,GAAGR,QAGrEW,EAAW9C,MAAMwD,MAAK,SAACC,EAAEC,GAAH,OAAUb,SAASY,EAAE3B,MAAQe,SAASa,EAAE5B,OAASe,SAASY,EAAEtB,QAAQU,SAASa,EAAEvB,WAE9E,KAApBW,EAAW/C,MACV,EAAKc,MAAM8C,aACc,IAAtB,EAAK9C,MAAMT,MACV,EAAKS,MAAMlB,QAAQ,CACfI,KAAM+C,EAAW/C,KACjBC,MAAO8C,EAAW9C,QAGtB,EAAKa,MAAMV,SAAS,CAChBJ,KAAM+C,EAAW/C,KACjBC,MAAO8C,EAAW9C,OACnB,EAAKa,MAAMT,QAGlBwD,MAAM,oC,EAGdC,QAAU,WACN,EAAKX,SAAS,CACVnD,KAAM,EAAKwC,MAAMxC,KACjBC,MAAM,GAAD,mBAAM,EAAKuC,MAAMvC,OAAjB,CAAwB,CAACoD,OAAO,OAAQtB,KAAK,KAAMK,OAAO,W,uDAG7D,IAAD,OACL,OACI,6BACI,yBAAK1C,UAAU,iBAAiBgC,QAASF,KAAKV,MAAM8C,YACpD,yBAAKlE,UAAU,cACX,yBAAKA,UAAU,OAAM,2DACrB,2BAAOQ,KAAK,OAAOR,UAAU,aAAa6B,SAAUC,KAAK8B,UAAWS,YAAY,YAAYnD,MAAOY,KAAKgB,MAAMxC,OAC7GwB,KAAKgB,MAAMvC,MAAM+D,KAAI,SAAClC,EAAMc,GACzB,OAAO,kBAAC,EAAD,CAASqB,IAAKrB,EAAG3B,GAAI2B,EAAGd,KAAMA,EAAMH,MAAO,EAAKA,MAAOM,QAAS,EAAKA,QAASC,OAAQ,EAAKA,OAAQG,SAAU,EAAKA,SAAUlB,YAAa,EAAKA,YAAaJ,UAAW,EAAKA,UAAWM,YAAa,EAAKA,YAAaiB,qBAAsB,EAAKA,0BAE3P,yBAAK5C,UAAU,iBACX,4BAAQA,UAAU,WAAWgC,QAASF,KAAKsC,SAA3C,mBACEtC,KAAKV,MAAMT,OAAS,EAAK,4BAAQX,UAAU,oBAAoBgC,QAAS,WACtE,EAAKZ,MAAM8C,YACX,EAAK9C,MAAMR,WAAW,EAAKQ,MAAMT,SAFV,WAGR,KACnB,4BAAQX,UAAU,OAAOQ,KAAK,SAASwB,QAASF,KAAKgC,YAArD,gB,GA5IA7D,aAyJTuE,kBAAQ,MALvB,SAA8BC,GAC1B,OAAOC,YAAmB,CAACxE,QAASA,EAASQ,SAAUA,EAAUE,WAAYA,GAAa6D,KAI/ED,CAAoC3B,GC9J7C8B,E,4MACF5B,WAAa,SAACC,GACV,OAAGI,SAASJ,GAAO,GAAW,IAAMC,OAAOD,GACpC,GAAGA,G,EAGd4B,mBAAqB,WAIjB,IAHA,IAAIC,EAAW,GACTC,EAAa,GAEX5B,EAAI,EAAGA,EAAE,GAAIA,IACjB4B,EAAWC,KAAK,EAAKhC,WAAWG,GAAK,OACrC4B,EAAWC,KAAK,EAAKhC,WAAWG,GAAK,OAGzC8B,EACA,IAAI,IAAI9B,EAAI,EAAGA,EAAI,GAAIA,IACnB,IAAI,IAAI+B,EAAI,EAAGA,EAAE,EAAK7D,MAAM8D,KAAK/D,OAAQ8D,IACrC,IAAI,IAAIE,EAAI,EAAGA,EAAE,EAAK/D,MAAM8D,KAAKD,GAAG1E,MAAMY,OAAQgE,IAC9C,GAAG/B,SAAS,EAAKhC,MAAM8D,KAAKD,GAAG1E,MAAM4E,GAAG9C,QAAU+C,KAAKC,MAAMnC,EAAE,IAAME,SAAS,EAAKhC,MAAM8D,KAAKD,GAAG1E,MAAM4E,GAAGzC,UAAgBQ,EAAE,EAAN,GAAU,CAC5H2B,EAASE,KAAKD,EAAW5B,IACzB,SAAS8B,EAKzB,OAAOH,G,EAGXS,iBAAmB,SAAC/E,GAEhB,IADA,IAAIgF,EAAQ,GACJrC,EAAI,EAAGA,EAAE3C,EAAMY,OAAQ+B,IAAK,CAEhC,IADA,IACQ+B,EAAI,EAAGA,EAAEM,EAAMpE,OAAQ8D,IACxBM,EAAMN,GAAGtB,SAAWpD,EAAM2C,GAAGS,QAC5B4B,EAAMN,GAAGO,QAIbD,EAAMR,KAAK,CAACpB,OAAQpD,EAAM2C,GAAGS,OAAQ6B,MAAO,IAOpD,IAFA,IAAIC,EAAI,GAEAvC,EAAI,EAAGA,EAAEqC,EAAMpE,OAAQ+B,IACxBA,EAAI,IAAGuC,GAAK,OACfA,GAAKF,EAAMrC,GAAGsC,MAAQ,IAAMD,EAAMrC,GAAGS,OAGzC,OAAO8B,G,uDAGD,IAAD,OACDX,EAAahD,KAAK8C,qBAEtB,OAAO,yBAAKL,IAAKzC,KAAKV,MAAMG,IACpB,2BAAOvB,UAAU,mBACb,+BACI,4BACK8E,EAAW3D,OAAS,EAAI,oCAAgB,KACxC2D,EAAW3D,OAAS,EAAI,oCAAgB,KACxC2D,EAAWR,KAAI,SAACoB,GAAD,OAAW,4BAAKA,QAGxC,+BACK5D,KAAKV,MAAM8D,KAAOpD,KAAKV,MAAM8D,KAAKZ,KAAI,SAACnE,EAAK+C,GACzC,IAAIiC,EAAI,EACR,OAAO,wBAAInD,QAAS,kBAAO,EAAKZ,MAAM8C,UAAU,EAAK9C,MAAM8D,KAAKhC,GAAIA,IAAKqB,IAAKrB,GACtE,wBAAIqB,IAAKrB,GAAI/C,EAAIG,MACjB,4BAAK,EAAKgF,iBAAiBnF,EAAII,QAC9BuE,EAAWR,KAAI,SAACoB,EAAMT,GACnB,IAAI/D,EAAQ,GACZd,QAAQC,IAAIiD,KAAKE,UAAU,EAAKpC,MAAM8D,KAAKhC,KAC3C,IAAId,EAAO,EAAKhB,MAAM8D,KAAKhC,GAAG3C,MAAM4E,GAKpC,OAJI/C,GAASA,EAAKC,KAAO,IAAMD,EAAKM,SAAYgD,IAC5CxE,EAAQ,EAAKE,MAAM8D,KAAKhC,GAAG3C,MAAM4E,GAAGxB,OACpCwB,KAEG,4BAAKjE,UAGvB,Y,GAnFLjB,aA8FTuE,mBAJf,SAAyB1B,GACrB,MAAO,CAACoC,KAAMpC,EAAMoC,QAGTV,CAAyBG,GCnEzBgB,E,4MAxBX7C,MAAQ,CACJ8C,MAAM,EACNC,iBAAiB,CAACvF,KAAK,GAAIC,MAAM,CAAC,CAACoD,OAAQ,OAAQtB,KAAK,KAAMK,OAAO,S,EAGzEwB,UAAY,SAAC/D,EAAK+C,GACd,EAAKO,SAAS,CACVmC,MAAO,EAAK9C,MAAM8C,KAClBC,iBAAkB1F,EAClB2F,mBAAoB5C,K,uDAIlB,IAAD,OACL,OACI,6BACI,4BAAQlD,UAAU,WAAWgC,QAAS,kBAAO,EAAKkC,UAAU,CAAC5D,KAAK,GAAIC,MAAM,CAAC,CAACoD,OAAQ,OAAQtB,KAAK,KAAMK,OAAO,SAAU,KAA1H,OACCZ,KAAKgB,MAAM8C,KAAO,kBAAC,EAAD,CAAW1B,UAAWpC,KAAKoC,UAAW/D,IAAK2B,KAAKgB,MAAM+C,iBAAkBlF,MAAOmB,KAAKgB,MAAMgD,qBAAyB,KACtI,kBAAC,EAAD,CAAWvB,IAAK,EAAGhD,GAAI,EAAG2C,UAAWpC,KAAKoC,iB,GAnBvCjE,aCQJ8F,MATf,WACE,OACE,yBAAK/F,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBS,ICOAC,EAJKC,YAAgB,CAChCpB,KDJW,WAAuB,IAAtBpC,EAAqB,uDAAf,GAAIyD,EAAW,uCAC7BlD,EAAaC,KAAKC,MAAMD,KAAKE,UAAUV,IAE3C,OAAOyD,EAAO/F,MACV,IAAK,iBACD6C,EAAW0B,KAAKwB,EAAO9F,SACvB,MACJ,IAAK,kBACD4C,EAAWkD,EAAO9F,QAAQE,OAAOJ,MAAQgG,EAAO9F,QAAQN,IAAII,MAC5D,MACJ,IAAK,oBACD8C,EAAWQ,OAAO0C,EAAO9F,QAAQ,GAKzC,OAAO4C,KEPLmD,EAAQC,YAAYJ,GAE1BK,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjH,QAAQiH,MAAMA,EAAMC,c","file":"static/js/main.ff89323f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../CSS/App.css';\n\nclass Header extends Component {\n    render() {\n        return(\n        <div className = \"header\">\n            \n        </div>\n        );\n    }\n}\n\nexport default Header;","export const addMeds = (med) => {\n    console.log(\"New meds added: \" + med.name);\n    console.log(\"Doses: \" + med.doses)\n\n    return {\n        type: \"NEW_MEDICATION\",\n        payload: med\n    };\n}","export const editMeds = (med, index) => {\n    console.log(\"Medication edited at index \" + index);\n    return {\n        type: \"EDIT_MEDICATION\", \n        payload: {\n            med:med,\n            index:index\n        }\n    };\n}","export const deleteMeds = (index) => {\n    console.log(\"Medication deleted on index: \" + index);\n    return{\n        type: \"DELETE_MEDICATION\",\n        payload: index\n    };\n}","import React, {Component} from 'react';\nimport '../CSS/NewDose.css';\n\nclass NewDose extends Component {\n    hourEdited = (event) => {\n        let newValue = event.target.value;\n        if(newValue.length <= 2) {\n            this.props.edit_hour(newValue.replace(/[^0-9]+/g, \"\"), this.props.id);\n        } \n    }\n    minuteEdited = (event) => {\n        let newValue = event.target.value;\n        if(newValue.length <= 2) {\n            this.props.edit_minute(newValue.replace(/[^0-9]+/g, \"\"), this.props.id);\n        }\n    }\n    amountEdited = (event) => {\n        this.props.edit_amount(event.target.value, this.props.id);\n    }\n\n    render() {\n        return(<div className=\"new-dose\">\n        <div className=\"select-amount\">\n            <select ref=\"amount\" onChange={this.amountEdited}>\n                <option value=\"75mg\" selected>75mg</option>\n                <option value=\"150mg\">150mg</option>\n                <option value=\"500mg\">500mg</option>\n            </select>\n        </div>\n        <div className=\"time-picker\">\n            <div className=\"hour\">\n                <div className=\"hr-up\" onClick={() => {this.props.hr_up(this.props.id)}} />\n                <input type=\"text\" ref={(ref) => this.hour_input = ref} className=\"hr\" onChange={this.hourEdited.bind(this)} value={this.props.dose.hour} max=\"99\" />\n                <div className=\"hr-down\" onClick={() => {this.props.hr_down(this.props.id)}} />\n            </div>\n            <div className=\"separator\">:</div>\n            <div className=\"minute\">\n                <div className=\"min-up\" onClick={() => {this.props.min_up(this.props.id)}}/>\n                <input type=\"text\" ref={(ref) => this.minute_input = ref} className=\"min\" onChange={this.minuteEdited.bind(this)} value={this.props.dose.minute} max=\"99\" />\n                <div className=\"min-down\" onClick={() => {this.props.min_down(this.props.id)}} />\n            </div>\n        </div>\n        <button className=\"remove-element\" onClick={() => (this.props.removeElementAtIndex(this.props.id))}>Eyða</button>\n    </div>);\n    }\n}\n\nexport default NewDose;","import React, {Component} from 'react';\nimport '../CSS/AddWindow.css';\nimport {addMeds} from '../Actions/add-meds-action';\nimport {editMeds} from '../Actions/edit-meds-action';\nimport {deleteMeds} from '../Actions/delete-meds-action';\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport NewDose from './NewDose';\n\nclass AddWindow extends Component {\n    state = {\n        name: this.props.med.name,\n        doses: this.props.med.doses, \n    };\n\n    formatDate = (num) => {\n        if(String(num).length === 1) return(\"0\" + String(num));\n        if(num === \"\") return(\"00\");\n        return(\"\"+num);\n    }\n    hr_up = (i) => {\n        let hr = parseInt(this.state.doses[i].hour);\n        if(this.state.doses[i].hour === \"\") hr = 0;\n        hr++;\n        if(hr > 23) hr = 0;\n        var state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].hour = this.formatDate(hr);\n        this.setState(state_copy);\n    }\n    hr_down = (i) => {\n        let hr = parseInt(this.state.doses[i].hour);\n        if(this.state.hour === \"\") hr = 0;\n        hr--;\n        if(hr < 0) hr = 23;\n        var state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].hour = this.formatDate(hr);\n        this.setState(state_copy);\n    }\n    min_up = (i) => {\n        let hr = parseInt(this.state.doses[i].hour);\n        let min = parseInt(this.state.doses[i].minute);\n        if(this.state.doses[i].minute === \"\") min = 0;\n        if(this.state.doses[i].hour === \"\") hr = 0;\n\n        min += 30;\n        if(min >= 60) {\n            min = 0;\n            hr++;\n            if(hr > 23) hr = 0;\n        }\n        var state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].minute = this.formatDate(min);\n        state_copy.doses[i].hour = this.formatDate(hr);\n        this.setState(state_copy);\n    }\n    min_down = (i) => {\n        let hr = parseInt(this.state.doses[i].hour);\n        let min = parseInt(this.state.doses[i].minute);\n        if(this.state.doses[i].hour === \"\") hr = 0;\n        if(this.state.doses[i].minute === \"\") min = 0;\n\n        min -= 30;\n        if(min < 0) {\n            min = 30;\n            hr--;\n            if(hr < 0) hr = 23;\n        }\n        var state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].minute = this.formatDate(min);\n        state_copy.doses[i].hour = this.formatDate(hr);\n        this.setState(state_copy);\n    }\n\n    edit_minute = (value, i) => {\n        let state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].minute = value;\n        this.setState(state_copy);\n    }\n    edit_hour = (value, i) => {\n        let state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].hour = value;\n        this.setState(state_copy);\n    }\n    edit_amount = (value, i) => {\n        let state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses[i].amount = value;\n        this.setState(state_copy);\n    }\n    edit_name = (event) => {\n        let state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.name = event.target.value;\n        this.setState(state_copy);\n    }\n\n    removeElementAtIndex = (i) => {\n        let state_copy = JSON.parse(JSON.stringify(this.state));\n        state_copy.doses.splice(i, 1);\n        this.setState(state_copy);\n    }\n\n    submitMeds = () => {\n        var state_copy = JSON.parse(JSON.stringify(this.state));\n        for(let i = 0; i< state_copy.doses.length; i++) {\n            console.log(this.formatDate(state_copy.doses[i].hour));\n            state_copy.doses[i].hour = this.formatDate(state_copy.doses[i].hour);\n            state_copy.doses[i].minute = this.formatDate(state_copy.doses[i].minute);\n        }\n\n        state_copy.doses.sort((a,b) => (parseInt(a.hour) - parseInt(b.hour) || parseInt(a.minute)-parseInt(b.minute)));\n\n        if(state_copy.name !== \"\") {\n            this.props.toggleAdd();\n            if(this.props.index === -1) {\n                this.props.addMeds({                    \n                    name: state_copy.name,                \n                    doses: state_copy.doses,\n                });\n            } else {\n                this.props.editMeds({                    \n                    name: state_copy.name,                \n                    doses: state_copy.doses,\n                }, this.props.index);\n            }\n        } else {\n            alert(\"You cannot add empty medication\");\n        }\n    }\n    addDose = () => {\n        this.setState({\n            name: this.state.name,\n            doses: [...this.state.doses, {amount:\"75mg\", hour:\"09\", minute:\"00\"}]});\n    }\n\n    render() {\n        return(\n            <div>\n                <div className='dim-background' onClick={this.props.toggleAdd}></div>\n                <div className='add-window'>\n                    <div className=\"top\"><p>Bæta við lyfjagjöf</p></div>\n                    <input type=\"text\" className=\"name-input\" onChange={this.edit_name} placeholder=\"Nafn lyfs\" value={this.state.name} />\n                    {this.state.doses.map((dose, i) => {\n                        return(<NewDose key={i} id={i} dose={dose} hr_up={this.hr_up} hr_down={this.hr_down} min_up={this.min_up} min_down={this.min_down} edit_minute={this.edit_minute} edit_hour={this.edit_hour} edit_amount={this.edit_amount} removeElementAtIndex={this.removeElementAtIndex} />);\n                    })}\n                    <div className=\"button-holder\">\n                        <button className=\"add-dose\" onClick={this.addDose}>Nýr skammtur</button>\n                        {(this.props.index >= 0) ? <button className=\"delete-medication\" onClick={() => {\n                            this.props.toggleAdd();\n                            this.props.deleteMeds(this.props.index);\n                        }}>Eyða</button> : null}\n                        <button className=\"save\" type=\"submit\" onClick={this.submitMeds}>Vista</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction matchDispatchToProps(dispatch) {\n    return bindActionCreators({addMeds: addMeds, editMeds: editMeds, deleteMeds: deleteMeds}, dispatch);\n}\n\n\nexport default connect(null, matchDispatchToProps)(AddWindow);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport '../CSS/Info.css';\n\nclass MedsTable extends Component {\n    formatDate = (num) => {\n        if(parseInt(num) < 10) return(\"0\" + String(num));\n        return(\"\"+num);\n    }\n    // Needs optimizing, think about sorting etc.\n    relevantTimelabels = () => {\n        let relevant = [];\n        const timeLabels = [];\n\n        for(let i = 0; i<24; i++) {\n            timeLabels.push(this.formatDate(i) + \":00\");\n            timeLabels.push(this.formatDate(i) + \":30\");\n        }\n\n        outer:\n        for(let i = 0; i < 48; i++) {\n            for(let j = 0; j<this.props.meds.length; j++) {\n                for(let k = 0; k<this.props.meds[j].doses.length; k++) {\n                    if(parseInt(this.props.meds[j].doses[k].hour) === Math.floor(i/2) && parseInt(this.props.meds[j].doses[k].minute) === 30*(i%2)) {\n                        relevant.push(timeLabels[i]);\n                        continue outer;\n                    }\n                }\n            } \n        }\n        return(relevant)\n    }\n    // Needs optimizing, think about sorting etc.\n    summarizeAmounts = (doses) => {\n        let count = [];\n        for(let i = 0; i<doses.length; i++) {\n            let included = false;\n            for(let j = 0; j<count.length; j++) {\n                if(count[j].amount === doses[i].amount) {\n                    count[j].total++;\n                }\n            }\n            if(included === false) {\n                count.push({amount: doses[i].amount, total: 1});\n            }\n\n        }\n\n        var s = \"\";\n\n        for(let i = 0; i<count.length; i++) {\n            if(i > 0) s += \" + \"\n            s += count[i].total + \"x\" + count[i].amount;\n        }\n\n        return s;\n    }\n\n    render() {\n        let timeLabels = this.relevantTimelabels();\n\n        return(<div key={this.props.id}>\n                <table className=\"medication-info\">\n                    <thead>\n                        <tr>\n                            {timeLabels.length > 0 ? <th>Nafn</th> : null}\n                            {timeLabels.length > 0 ? <th>Magn</th> : null}\n                            {timeLabels.map((time) => (<th>{time}</th>))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.meds ? this.props.meds.map((med, i) => {\n                            var k = 0;\n                            return(<tr onClick={() => (this.props.toggleAdd(this.props.meds[i], i))} key={i}>\n                                    <td key={i}>{med.name}</td>\n                                    <td>{this.summarizeAmounts(med.doses)}</td>\n                                    {timeLabels.map((time, j) => {\n                                        let value = \"\";\n                                        console.log(JSON.stringify(this.props.meds[i]));\n                                        let dose = this.props.meds[i].doses[k];\n                                        if (dose && (dose.hour + \":\" + dose.minute) === time) {\n                                            value = this.props.meds[i].doses[k].amount;\n                                            k++;\n                                        }\n                                        return(<td>{value}</td>);\n                                    })}\n                                </tr>);\n                        }) : null}\n                    </tbody>\n                </table>\n            </div>);\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {meds: state.meds};\n}\n\nexport default connect(mapStateToProps)(MedsTable);","import React, {Component} from 'react';\nimport '../CSS/Info.css';\nimport AddWindow from './AddWindow';\nimport MedsTable from './MedsTable';\n\n\nclass Info extends Component {\n    state = {\n        seen: false,\n        openAddWindowMed:{name:\"\", doses:[{amount: \"75mg\", hour:\"09\", minute:\"00\"}]}\n    };\n\n    toggleAdd = (med, i) => {\n        this.setState({\n            seen: !this.state.seen,\n            openAddWindowMed: med,\n            openAddWindowIndex: i\n        });\n    };\n\n    render() {\n        return(\n            <div>\n                <button className=\"add-meds\" onClick={() => (this.toggleAdd({name:\"\", doses:[{amount: \"75mg\", hour:\"09\", minute:\"00\"}]}, -1))}>Add</button>\n                {this.state.seen ? <AddWindow toggleAdd={this.toggleAdd} med={this.state.openAddWindowMed} index={this.state.openAddWindowIndex} /> : null}\n                <MedsTable key={0} id={0} toggleAdd={this.toggleAdd} />\n            </div>\n        );\n    }\n}\n\nexport default Info;","import React from 'react';\nimport '../CSS/App.css';\nimport Header from './Header';\nimport Info from './Info';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Info />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default (state=[], action) => {\n    let state_copy = JSON.parse(JSON.stringify(state));\n\n    switch(action.type) {\n        case \"NEW_MEDICATION\":\n            state_copy.push(action.payload);\n            break;\n        case \"EDIT_MEDICATION\":\n            state_copy[action.payload.index].doses = action.payload.med.doses;\n            break;\n        case \"DELETE_MEDICATION\":\n            state_copy.splice(action.payload,1);\n            break;\n        default: break;\n    }\n\n    return(state_copy);\n}","import {combineReducers} from 'redux';\nimport MedsReducer from './meds-reducer';\n\nconst allReducers = combineReducers({\n    meds: MedsReducer\n});\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport allReducers from './Reducers/combiner'\nimport {Provider} from 'react-redux';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}